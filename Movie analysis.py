# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FNESHvn6XFBuwCH9p7PZbL-xX6aa9Kcm
"""

#Importing all the required libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#uploading the files
from google.colab import files
files.upload()

#assigning dataset to variables
data=pd.read_csv('IMDB-Movie-Data.csv')

#Check first 10 rows
data.head(10)

#Check last 10 rows of dataset
data.tail(10)

#Find shape of our dataset(number of rows and columns)
data.shape

print("Number of Rows",data.shape[0])
print("Number of Columns",data.shape[1])

#Getting info about data
data.info()

#Missing values in dataset
print("Any missing value",data.isnull().values.any())

data.isnull()

data.isnull().sum()

sns.heatmap(data.isnull())

per_missing=data.isnull().sum()*100/len(data)
per_missing

#Drop all the missing values

data.dropna(axis=0)

#Check for duplicate values in our dataset

dup_data=data.duplicated().any()

print("duplicate values present?",dup_data)

data=data.drop_duplicates()
data

#Get overall statistics about the dataframe

data.describe()

#statistics for all the columns
data.describe(include='all')

#Display title of movie having runtime >=180min

data.columns

data[data['Runtime (Minutes)']>=180]['Title']

#Year in which thera was the highest average voting

data.columns

data.groupby('Year')['Votes'].mean().sort_values(ascending=False)

sns.barplot(x='Year',y='Votes',data=data)
plt.title("Votes by year")
plt.show()

#In which year there was the highest average revenue

data.columns

data.groupby('Year')['Revenue (Millions)'].mean().sort_values(ascending=False)

sns.barplot(x='Year',y='Revenue (Millions)',data=data)
plt.title("Revenue by year")
plt.show()

#The average rating for each director

data.columns

data.groupby('Director')['Rating'].mean().sort_values()

#Display top 10 Lengthy Movies Title and Runtime

data.columns

top_10len=data.nlargest(10,'Runtime (Minutes)') [['Title','Runtime (Minutes)']]\
.set_index('Title')

top_10len

sns.barplot(x='Runtime (Minutes)',y=top_10len.index,data=top_10len)

#Display  number of movies per year

data.columns

data['Year'].value_counts()

sns.countplot(x='Year',data=data)
plt.title("Number of movies per Year")
plt.show()

#Find most popular Movie title(Highest revenue)

data.columns

data[data['Revenue (Millions)'].max()==data['Revenue (Millions)']]['Title']

#display top 10 Highest rated movie titles and directors

data.columns

top_10len=data.nlargest(10,'Rating') [['Title','Rating','Director']]\
.set_index('Title')

top_10len

sns.barplot(x='Rating',y=top_10len.index,data=top_10len,hue='Director',dodge=False)
plt.legend(bbox_to_anchor=(1.05,1),loc=2) 
plt.show()

#Top 10 Highest revenue movies Titles

data.columns

data.nlargest(10,'Revenue (Millions)')['Title']

top_10=data.nlargest(10,'Revenue (Millions)')[['Title','Revenue (Millions)']].set_index('Title')

top_10

sns.barplot(x='Revenue (Millions)',y=top_10.index,data=top_10)
plt.title("Top 10 highest revenue movie titles")
plt.show()

#Find average rating of movies year wise

data.columns

data.groupby('Year')['Rating'].mean().sort_values(ascending=False)

#Does rating affect revenue

data.columns

sns.scatterplot(x='Rating',y='Revenue (Millions)',data=data)

#classify movies based on ratings(Excellent,good and average)

data.columns

def rating(rating):
  if rating>=7.0:
    return "Excellent"
  elif rating>=6.0:
    return "Good"
  else:
    "Average"

data['rating_cat']=data['Rating'].apply(rating)

data.head()

#Count number of action movies

data.columns

data['Genre'].dtype

len(data[data['Genre'].str.contains('Action')])

#Find Unique values from genre

data.columns

data['Genre']

list1=[]
for value in data['Genre']:
  list1.append(value.split(','))

list1

one_d=[]
for item in list1:
  for item1 in item:
    one_d.append(item1)

one_d

uni_list=[]
for item in one_d:
  if item not in uni_list:
    uni_list.append(item)

uni_list

#How many films of each genre were made

one_d=[]
for item in list1:
  for item1 in item:
    one_d.append(item1)

one_d

from collections import Counter

Counter(one_d)